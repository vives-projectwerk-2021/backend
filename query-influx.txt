//------------------------------------------- Temperatures
tempValues = () => {
    tempAir = from(bucket: "pulu")
      |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
      |> filter(fn: (r) => r["_measurement"] == "sensors")
      |> filter(fn: (r) => r["_field"] == "value")
      |> filter(fn: (r) => r["host"] == "2c004e0005504e3942363620")
      |> filter(fn: (r) => r["temperature"] == "air")
      |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)
  
    tempGround = from(bucket: "pulu")
      |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
      |> filter(fn: (r) => r["_measurement"] == "sensors")
      |> filter(fn: (r) => r["_field"] == "value")
      |> filter(fn: (r) => r["host"] == "2c004e0005504e3942363620")
      |> filter(fn: (r) => r["temperature"] == "ground")
      |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)

    return join(tables: {tAir:tempAir, tGround:tempGround}, on: ["_time", "_stop", "_start", "_field", "_measurement", "host"])

}

//------------------------------------------- Moisture Levels 1 & 2
moisValues12 = () => {
  moisture1 = from(bucket: "pulu")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "sensors")
    |> filter(fn: (r) => r["_field"] == "value")
    |> filter(fn: (r) => r["host"] == "2c004e0005504e3942363620")
    |> filter(fn: (r) => r["moisture"] == "level1")
    |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)

  moisture2 = from(bucket: "pulu")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "sensors")
    |> filter(fn: (r) => r["_field"] == "value")
    |> filter(fn: (r) => r["host"] == "2c004e0005504e3942363620")
    |> filter(fn: (r) => r["moisture"] == "level2")
    |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)

    return join(tables: {mLevel1:moisture1, mLevel2:moisture2}, on: ["_time", "_stop", "_start", "_field", "_measurement", "host"])
}

//------------------------------------------- Moisture Levels 3 & 4
moisValues34 = () => {
  moisture3 = from(bucket: "pulu")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "sensors")
    |> filter(fn: (r) => r["_field"] == "value")
    |> filter(fn: (r) => r["host"] == "2c004e0005504e3942363620")
    |> filter(fn: (r) => r["moisture"] == "level3")
    |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)

  moisture4 = from(bucket: "pulu")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "sensors")
    |> filter(fn: (r) => r["_field"] == "value")
    |> filter(fn: (r) => r["host"] == "2c004e0005504e3942363620")
    |> filter(fn: (r) => r["moisture"] == "level4")
    |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)

    return join(tables: {mLevel3:moisture3, mLevel4:moisture4}, on: ["_time", "_stop", "_start", "_field", "_measurement", "host"])
}

//------------------------------------------- Light and Battery voltages
lightBattVolt = () => {
  lightValue = from(bucket: "pulu")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "sensors")
    |> filter(fn: (r) => r["_field"] == "value")
    |> filter(fn: (r) => r["host"] == "2c004e0005504e3942363620")
    |> filter(fn: (r) => r["type"] == "light")
    |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)

  battVoltValue = from(bucket: "pulu")
    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
    |> filter(fn: (r) => r["_measurement"] == "sensors")
    |> filter(fn: (r) => r["_field"] == "value")
    |> filter(fn: (r) => r["host"] == "2c004e0005504e3942363620")
    |> filter(fn: (r) => r["voltage"] == "battery")
    |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)

    return join(tables: {light:lightValue, battVoltage:battVoltValue}, on: ["_time", "_stop", "_start", "_field", "_measurement", "host"])
}

//------------------------------------------- Joining moistures and others
joinMoistureLevels = () => {
  return join(tables: {mois12:moisValues12(), mois34:moisValues34()}, on: ["_time", "_stop", "_start", "_field", "_measurement", "host"])
}

joinTempLightBattValues = () => {
  return join(tables: {temp:tempValues(), lightBatt:lightBattVolt()}, on: ["_time", "_stop", "_start", "_field", "_measurement", "host"])
}

//------------------------------------------- Final join
join(tables: {moisLevels:joinMoistureLevels(), other:joinTempLightBattValues()}, on: ["_time", "_stop", "_start", "_field", "_measurement", "host"])
  |> drop(columns: ["_field","_start","_stop","moisture_mLevel1","moisture_mLevel2", "moisture_mLevel3","moisture_mLevel4", "type", "voltage", "temperature_tAir", "temperature_tGround"])